# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Project {
  id: ID!
  name: String
  address: String
  owner: String
  properties(
    where: PropertyWhereInput! = {}
    orderBy: [PropertyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Property!]
  propertiesCount(where: PropertyWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  owner: StringFilter
  properties: PropertyManyRelationFilter
}

input PropertyManyRelationFilter {
  every: PropertyWhereInput
  some: PropertyWhereInput
  none: PropertyWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  owner: OrderDirection
}

input ProjectUpdateInput {
  name: String
  address: String
  owner: String
  properties: PropertyRelateToManyForUpdateInput
}

input PropertyRelateToManyForUpdateInput {
  disconnect: [PropertyWhereUniqueInput!]
  set: [PropertyWhereUniqueInput!]
  create: [PropertyCreateInput!]
  connect: [PropertyWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  address: String
  owner: String
  properties: PropertyRelateToManyForCreateInput
}

input PropertyRelateToManyForCreateInput {
  create: [PropertyCreateInput!]
  connect: [PropertyWhereUniqueInput!]
}

type Property {
  id: ID!
  no: String
  owner: Customer
  project: Project
  addressLine: String
}

input PropertyWhereUniqueInput {
  id: ID
}

input PropertyWhereInput {
  AND: [PropertyWhereInput!]
  OR: [PropertyWhereInput!]
  NOT: [PropertyWhereInput!]
  id: IDFilter
  no: StringFilter
  owner: CustomerWhereInput
  project: ProjectWhereInput
  addressLine: StringFilter
}

input PropertyOrderByInput {
  id: OrderDirection
  no: OrderDirection
  addressLine: OrderDirection
}

input PropertyUpdateInput {
  no: String
  owner: CustomerRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  addressLine: String
}

input CustomerRelateToOneForUpdateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input PropertyUpdateArgs {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateInput!
}

input PropertyCreateInput {
  no: String
  owner: CustomerRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
  addressLine: String
}

input CustomerRelateToOneForCreateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Customer {
  id: ID!
  name: String
  phone: String
  email: String
  properties(
    where: PropertyWhereInput! = {}
    orderBy: [PropertyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Property!]
  propertiesCount(where: PropertyWhereInput! = {}): Int
}

input CustomerWhereUniqueInput {
  id: ID
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  email: StringFilter
  properties: PropertyManyRelationFilter
}

input CustomerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  email: OrderDirection
}

input CustomerUpdateInput {
  name: String
  phone: String
  email: String
  properties: PropertyRelateToManyForUpdateInput
}

input CustomerUpdateArgs {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateInput!
}

input CustomerCreateInput {
  name: String
  phone: String
  email: String
  properties: PropertyRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createProperty(data: PropertyCreateInput!): Property
  createProperties(data: [PropertyCreateInput!]!): [Property]
  updateProperty(
    where: PropertyWhereUniqueInput!
    data: PropertyUpdateInput!
  ): Property
  updateProperties(data: [PropertyUpdateArgs!]!): [Property]
  deleteProperty(where: PropertyWhereUniqueInput!): Property
  deleteProperties(where: [PropertyWhereUniqueInput!]!): [Property]
  createCustomer(data: CustomerCreateInput!): Customer
  createCustomers(data: [CustomerCreateInput!]!): [Customer]
  updateCustomer(
    where: CustomerWhereUniqueInput!
    data: CustomerUpdateInput!
  ): Customer
  updateCustomers(data: [CustomerUpdateArgs!]!): [Customer]
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteCustomers(where: [CustomerWhereUniqueInput!]!): [Customer]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  properties(
    where: PropertyWhereInput! = {}
    orderBy: [PropertyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Property!]
  property(where: PropertyWhereUniqueInput!): Property
  propertiesCount(where: PropertyWhereInput! = {}): Int
  customers(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  customer(where: CustomerWhereUniqueInput!): Customer
  customersCount(where: CustomerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
